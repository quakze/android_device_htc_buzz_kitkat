From 70f0a62f3f238516bd937c54fbf1b27c6ed2d0e7 Mon Sep 17 00:00:00 2001
From: Paul Mongold <pmongold@gmail.com>
Date: Sat, 25 Aug 2012 23:38:30 -0400
Subject: [PATCH] ifdef/fixup screenshot for old GPUs & remove
 directRenderScreenToTexture

move directCapture call outside if statement, LOG* -> ALOG*, & fix UNLIKELY call

add "BOARD_USE_ADRENO_130_GPU := true" to BoardConfig to enable

Change-Id: I894ec27b6eebc56c1ec250cdfe7189bae34e480f
---
 services/surfaceflinger/Android.mk         |    4 +
 services/surfaceflinger/SurfaceFlinger.cpp |  164 ++++------------------------
 services/surfaceflinger/SurfaceFlinger.h   |    5 +-
 3 files changed, 25 insertions(+), 148 deletions(-)

diff --git a/services/surfaceflinger/Android.mk b/services/surfaceflinger/Android.mk
index a0b298b..66dd87d 100644
--- a/services/surfaceflinger/Android.mk
+++ b/services/surfaceflinger/Android.mk
@@ -32,6 +32,10 @@ ifeq ($(TARGET_DISABLE_TRIPLE_BUFFERING), true)
 	LOCAL_CFLAGS += -DTARGET_DISABLE_TRIPLE_BUFFERING
 endif
 
+ifeq ($(BOARD_USE_ADRENO_130_GPU),true)
+	LOCAL_CFLAGS += -DADRENO_130_GPU
+endif
+
 LOCAL_SHARED_LIBRARIES := \
 	libcutils \
 	libhardware \
diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index ffd09a7..558af35 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -26,7 +26,9 @@
 #include <limits.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#ifdef ADRENO_130_GPU
 #include <linux/fb.h>
+#endif
 #include <sys/ioctl.h>
 
 #include <cutils/log.h>
@@ -1881,7 +1883,7 @@ status_t SurfaceFlinger::renderScreenToTextureLocked(DisplayID dpy,
     ATRACE_CALL();
 
     if (!GLExtensions::getInstance().haveFramebufferObject())
-        return directRenderScreenToTextureLocked(dpy, textureName, uOut, vOut);
+        return INVALID_OPERATION;
 
     // get screen geometry
     const DisplayHardware& hw(graphicPlane(dpy).displayHardware());
@@ -1941,144 +1943,6 @@ status_t SurfaceFlinger::renderScreenToTextureLocked(DisplayID dpy,
     return NO_ERROR;
 }
 
-
-status_t SurfaceFlinger::directRenderScreenToTextureLocked(DisplayID dpy,
-        GLuint* textureName, GLfloat* uOut, GLfloat* vOut)
-{
-    status_t result;
-    const DisplayHardware& hw(graphicPlane(dpy).displayHardware());
-
-    // use device framebuffer in /dev/graphics/fb0
-    size_t offset;
-    uint32_t bytespp, format, gl_format, gl_type;
-    size_t size = 0;
-    struct fb_var_screeninfo vinfo;
-    const char* fbpath = "/dev/graphics/fb0";
-    int fb = open(fbpath, O_RDONLY);
-    void const* mapbase = MAP_FAILED;
-    ssize_t mapsize = -1;
-
-    if (fb < 0) {
-        LOGE("Failed to open framebuffer");
-        return INVALID_OPERATION;
-    }
-
-    if (ioctl(fb, FBIOGET_VSCREENINFO, &vinfo) < 0) {
-        LOGE("Failed to get framebuffer info");
-        close(fb);
-        return INVALID_OPERATION;
-    }
-
-    bytespp = vinfo.bits_per_pixel / 8;
-    const uint32_t hw_w = vinfo.xres;
-    const uint32_t hw_h = vinfo.yres;
-
-    switch (bytespp) {
-    case 2:
-        format = PIXEL_FORMAT_RGB_565;
-        gl_format = GL_RGB;
-        gl_type = GL_UNSIGNED_SHORT_5_6_5;
-        break;
-    case 4:
-        format = PIXEL_FORMAT_RGBX_8888;
-        gl_format = GL_RGBA;
-        gl_type = GL_UNSIGNED_BYTE;
-        break;
-    default:
-        close(fb);
-        LOGE("Failed to detect framebuffer bytespp");
-        return INVALID_OPERATION;
-        break;
-    }
-
-    offset = (vinfo.xoffset + vinfo.yoffset * vinfo.xres) * bytespp;
-    size = vinfo.xres * vinfo.yres * bytespp;
-
-    mapsize = offset + size;
-    mapbase = mmap(0, mapsize, PROT_READ, MAP_PRIVATE, fb, 0);
-    close(fb);
-    if (mapbase == MAP_FAILED) {
-        return INVALID_OPERATION;
-    }
-
-    void const* fbbase = (void *)((char const *)mapbase + offset);
-    GLfloat u = 1;
-    GLfloat v = 1;
-
-    // build texture
-    GLuint tname;
-    glGenTextures(1, &tname);
-    glBindTexture(GL_TEXTURE_2D, tname);
-    glTexImage2D(GL_TEXTURE_2D, 0, gl_format,
-            hw_w, hw_h, 0, gl_format, GL_UNSIGNED_BYTE, 0);
-    if (glGetError() != GL_NO_ERROR) {
-        while ( glGetError() != GL_NO_ERROR ) ;
-        GLint tw = (2 << (31 - clz(hw_w)));
-        GLint th = (2 << (31 - clz(hw_h)));
-        glTexImage2D(GL_TEXTURE_2D, 0, gl_format,
-                tw, th, 0, gl_format, GL_UNSIGNED_BYTE, 0);
-        u = GLfloat(hw_w) / tw;
-        v = GLfloat(hw_h) / th;
-    }
-
-    // write fb data to image buffer texture (reverse order)
-    GLubyte* imageData = (GLubyte*)malloc(size);
-    if (imageData) {
-        void *ptr = imageData;
-        uint32_t rowlen = hw_w * bytespp;
-        offset = size;
-        for (uint32_t j = hw_h; j > 0; j--) {
-            offset -= rowlen;
-            memcpy(ptr, fbbase + offset, rowlen);
-            ptr += rowlen;
-        }
-
-        // write image buffer to the texture
-        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
-        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
-
-        // copy imageData to the texture
-        glTexImage2D(GL_TEXTURE_2D, 0, gl_format, hw_w, hw_h, 0,
-                gl_format, gl_type, imageData);
-
-        LOGI("direct Framebuffer texture for gl_format=%d gl_type=%d", gl_format, gl_type);
-        result = NO_ERROR;
-    } else {
-        result = NO_MEMORY;
-    }
-
-    // redraw the screen entirely...
-    glDisable(GL_TEXTURE_2D);
-    glDisable(GL_SCISSOR_TEST);
-    glClearColor(0,0,0,1);
-    glClear(GL_COLOR_BUFFER_BIT);
-    glEnable(GL_SCISSOR_TEST);
-    glMatrixMode(GL_MODELVIEW);
-    glLoadIdentity();
-    const Vector< sp<LayerBase> >& layers(mVisibleLayersSortedByZ);
-    const size_t count = layers.size();
-    for (size_t i=0 ; i<count ; ++i) {
-        const sp<LayerBase>& layer(layers[i]);
-        layer->drawForSreenShot();
-    }
-
-    hw.compositionComplete();
-
-    // done
-    munmap((void *)mapbase, mapsize);
-
-    *textureName = tname;
-    *uOut = u;
-    *vOut = v;
-
-    // free buffer memory
-    if (imageData) {
-        free(imageData);
-    }
-
-    return result;
-}
-
 // ---------------------------------------------------------------------------
 
 class VSyncWaiter {
@@ -2546,6 +2410,7 @@ status_t SurfaceFlinger::turnElectronBeamOn(int32_t mode)
 
 // ---------------------------------------------------------------------------
 
+#ifdef ADRENO_130_GPU
 status_t SurfaceFlinger::directCaptureScreenImplLocked(DisplayID dpy,
         sp<IMemoryHeap>* heap,
         uint32_t* w, uint32_t* h, PixelFormat* f,
@@ -2563,7 +2428,7 @@ status_t SurfaceFlinger::directCaptureScreenImplLocked(DisplayID dpy,
     const char* fbpath = "/dev/graphics/fb0";
 
     // only one display supported for now
-    if (UNLIKELY(uint32_t(dpy) >= DISPLAY_COUNT))
+    if (CC_UNLIKELY(uint32_t(dpy) >= DISPLAY_COUNT))
         return BAD_VALUE;
 
     // get screen geometry
@@ -2579,12 +2444,12 @@ status_t SurfaceFlinger::directCaptureScreenImplLocked(DisplayID dpy,
 
     int fb = open(fbpath, O_RDONLY);
     if (fb < 0) {
-        LOGE("Failed to open framebuffer");
+        ALOGE("Failed to open framebuffer");
         return INVALID_OPERATION;
     }
 
     if (ioctl(fb, FBIOGET_VSCREENINFO, &vinfo) < 0) {
-        LOGE("Failed to get framebuffer info");
+        ALOGE("Failed to get framebuffer info");
         close(fb);
         return INVALID_OPERATION;
     }
@@ -2599,7 +2464,7 @@ status_t SurfaceFlinger::directCaptureScreenImplLocked(DisplayID dpy,
         break;
     default:
         close(fb);
-        LOGE("Failed to detect framebuffer bytespp");
+        ALOGE("Failed to detect framebuffer bytespp");
         return INVALID_OPERATION;
         break;
     }
@@ -2664,6 +2529,7 @@ status_t SurfaceFlinger::directCaptureScreenImplLocked(DisplayID dpy,
 
     return result;
 }
+#endif
 
 status_t SurfaceFlinger::captureScreenImplLocked(DisplayID dpy,
         sp<IMemoryHeap>* heap,
@@ -2679,9 +2545,12 @@ status_t SurfaceFlinger::captureScreenImplLocked(DisplayID dpy,
     if (CC_UNLIKELY(uint32_t(dpy) >= DISPLAY_COUNT))
         return BAD_VALUE;
 
+#ifdef ADRENO_130_GPU
+    return directCaptureScreenImplLocked(dpy,
+            heap, w, h, f, sw, sh, minLayerZ, maxLayerZ);
+#endif
     if (!GLExtensions::getInstance().haveFramebufferObject())
-        return directCaptureScreenImplLocked(dpy,
-                heap, w, h, f, sw, sh, minLayerZ, maxLayerZ);
+        return INVALID_OPERATION;
 
     // get screen geometry
     const DisplayHardware& hw(graphicPlane(dpy).displayHardware());
@@ -2797,6 +2666,11 @@ status_t SurfaceFlinger::captureScreen(DisplayID dpy,
     if (CC_UNLIKELY(uint32_t(dpy) >= DISPLAY_COUNT))
         return BAD_VALUE;
 
+#ifndef ADRENO_130_GPU
+    if (!GLExtensions::getInstance().haveFramebufferObject())
+        return INVALID_OPERATION;
+#endif
+
     class MessageCaptureScreen : public MessageBase {
         SurfaceFlinger* flinger;
         DisplayID dpy;
diff --git a/services/surfaceflinger/SurfaceFlinger.h b/services/surfaceflinger/SurfaceFlinger.h
index 0fe0c66..fef6574 100644
--- a/services/surfaceflinger/SurfaceFlinger.h
+++ b/services/surfaceflinger/SurfaceFlinger.h
@@ -355,14 +355,13 @@ private:
                     uint32_t reqWidth, uint32_t reqHeight,
                     uint32_t minLayerZ, uint32_t maxLayerZ);
 
+#ifdef ADRENO_130_GPU
             status_t directCaptureScreenImplLocked(DisplayID dpy,
                     sp<IMemoryHeap>* heap,
                     uint32_t* width, uint32_t* height, PixelFormat* format,
                     uint32_t reqWidth, uint32_t reqHeight,
                     uint32_t minLayerZ, uint32_t maxLayerZ);
-
-            status_t directRenderScreenToTextureLocked(DisplayID dpy,
-                    GLuint* textureName, GLfloat* uOut, GLfloat* vOut);
+#endif
 
             status_t turnElectronBeamOffImplLocked(int32_t mode);
             status_t turnElectronBeamOnImplLocked(int32_t mode);
-- 
1.7.9.5

